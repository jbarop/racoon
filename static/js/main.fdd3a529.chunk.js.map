{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["dataSource","process","csvToCountries","rows","countries","map","row","parseTime","d3","countryName","records","Object","entries","key","date","value","parseInt","filter","it","csvRowToRecords","reduce","accumulator","day","index","forEach","entry","record","App","useState","selectedCountries","setSelectedCountries","setCountries","graphContainer","useRef","useEffect","then","csvRows","current","maximumValue","selectedCountry","minimumDate","maximumDate","margin","width","height","selectAll","remove","svg","append","attr","x","domain","range","y","line","d","call","datum","className","Dropdown","placeholder","clearable","fluid","multiple","search","selection","options","keys","text","onChange","event","dropdownProps","ref","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fdd3a529.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport {Dropdown} from 'semantic-ui-react';\nimport * as d3 from 'd3';\nimport {DSVRowArray, DSVRowString} from 'd3';\n\nconst dataSource = `${process.env.PUBLIC_URL}/COVID-19/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv`;\n\ninterface Record {\n  date: Date;\n  value: number;\n}\n\ninterface Countries {\n  [key: string]: Record[]\n}\n\n/**\n * Converts a row from the CSV into an array of {@link Record}s.\n *\n * A row has a few columns of meta information and one column per day.\n */\nfunction csvRowToRecords(row: DSVRowString): { countryName: string, records: Record[] } {\n  const parseTime = d3.timeParse(\"%m/%d/%Y\");\n\n  return {\n    countryName: row['Country/Region']!,\n    records: Object.entries(row)\n      .map(key =>\n        ({\n          date: parseTime(key[0]),\n          value: parseInt(key[1] as string)\n        } as Record))\n      .filter(it => it.date != null)\n  };\n}\n\n/**\n * Converts a CSV into an object which holds time series {@link Record}s for each country.\n *\n * Some countries are split across multiple rows. These are summed together.\n */\nfunction csvToCountries(rows: DSVRowArray): Countries {\n  const countries = rows\n    .map(row => csvRowToRecords(row))\n    .reduce((accumulator, it) => {\n      // group by by country name because some countries are split across multiple rows\n      accumulator[it.countryName] = !accumulator[it.countryName]\n        ? it.records // new country --> insert it\n        : accumulator[it.countryName] // existing country --> add the values to the existing records.\n          .map((day, index) => ({...day, value: day.value + it.records[index].value}));\n      return accumulator;\n    }, {} as Countries);\n\n  // Filter out records with value == 0\n  Object.entries(countries)\n    .forEach((entry: [string, Record[]]) => countries[entry[0]] = entry[1].filter(record => record.value !== 0));\n\n  return countries;\n}\n\nfunction App() {\n  const [selectedCountries, setSelectedCountries] = useState<string[]>(['Germany', 'Italy', 'US']);\n  const [countries, setCountries] = useState<Countries>();\n  const graphContainer = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    d3.csv(dataSource)\n      .then((csvRows: DSVRowArray) => setCountries(csvToCountries(csvRows)))\n  }, []);\n\n  useEffect(() => {\n    if (!graphContainer.current || !countries) {\n      return;\n    }\n\n    const maximumValue =\n      d3.max(\n        selectedCountries\n          .map(selectedCountry => countries[selectedCountry])\n          .map((csvRowToRecords: Record[]) => d3.max(csvRowToRecords.map(value => value.value))!)\n      )!;\n\n    const minimumDate =\n      d3.min(\n        selectedCountries\n          .map(selectedCountry => countries[selectedCountry])\n          .map((csvRowToRecords: Record[]) => d3.min(csvRowToRecords.map(value => value.date))!)\n      )!;\n\n    const maximumDate =\n      d3.max(\n        selectedCountries\n          .map(selectedCountry => countries[selectedCountry])\n          .map((csvRowToRecords: Record[]) => d3.max(csvRowToRecords.map(value => value.date))!)\n      )!;\n\n    const margin = {top: 10, right: 30, bottom: 30, left: 60};\n    const width = 800 - margin.left - margin.right;\n    const height = 400 - margin.top - margin.bottom;\n\n    d3.select(graphContainer.current)\n      .selectAll(\"*\")\n      .remove();\n\n    const svg = d3.select(graphContainer.current)\n      .append(\"svg\")\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n    const x = d3.scaleTime()\n      .domain([minimumDate, maximumDate])\n      .range([0, width]);\n\n    const y = d3.scaleLinear()\n      .domain([1, maximumValue])\n      .range([height, 0]);\n\n    const line = d3.line<Record>()\n      .x(d => x(d.date))\n      .y(d => y(d.value));\n\n    svg.append(\"g\")\n      .attr(\"transform\", `translate(0, ${height})`)\n      .call(d3.axisBottom(x));\n\n    svg.append(\"g\")\n      .call(d3.axisLeft(y));\n\n    selectedCountries.forEach(selectedCountry => {\n      svg.append(\"path\")\n        .datum(countries[selectedCountry])\n        .attr(\"fill\", \"none\")\n        .attr(\"stroke\", \"steelblue\")\n        .attr(\"stroke-width\", 1.5)\n        .attr(\"d\", line);\n    })\n  }, [selectedCountries, countries, graphContainer]);\n\n  return !countries\n    ? <span>Loading</span>\n    : (\n      <>\n        <header className=\"App-header\">\n          <h1>racoon - Corona Dashboard</h1>\n        </header>\n        <main>\n          <Dropdown\n            placeholder='Countries'\n            clearable\n            fluid\n            multiple\n            search\n            selection\n            options={Object.keys(countries).map(value => ({key: value, text: value, value: value}))}\n            value={selectedCountries}\n            onChange={(event, dropdownProps) => setSelectedCountries(dropdownProps.value as string[])}\n          />\n          <div ref={graphContainer}/>\n        </main>\n      </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}